//
//  main.cpp
//  FinalTestPP2
//
//  Created by jjeoung on 1/30/24.
//

#include "Map.h"
#include <iostream>
#include <cassert>

using namespace std;

void test()
{
    Map msd;  // KeyType is std::str, ValueType is doub
    msd.insert("ccc", 80);
    msd.insert("aaa", 40);
    msd.insert("ddd", 60);
    msd.insert("bbb", 20);
    KeyType kl = "xxx";
    ValueType vl;
    assert(!msd.get(4, kl, vl)  &&  kl == "xxx");  // kl and vl unchanged
    assert(msd.get(1, kl, vl)  &&  kl == "bbb");   // "bbb" is greater than
                                                    // exactly 1 item
    
    //testing basic ability of adding Pairs using insert()
    Map s; //empty
    assert(s.empty());
    assert(s.size()==0);
    s.insert("a",1.1);
    //s.dump();
    assert(s.size()==1);
    s.insert("b",2.2);
    //s.dump();
    assert(s.size()==2);
    s.insert("c",3.3);
    //s.dump();
    assert(s.size()==3);
    s.insert("d",4.4);
    //s.dump();
    assert(s.size()==4);
    s.insert("e",5.5);
    //s.dump();
    assert(s.size()==5);
    s.insert("f",6.6);
    //s.dump();
    assert(s.size()==6);
    s.insert("g",7.7);
    //s.dump();
    assert(s.size()==7);
    s.insert("h",8.8);
    //s.dump();
    assert(s.size()==8);
    s.insert("i",9.9);
    //s.dump();
    assert(s.size()==9);
    s.insert("j",10.10);
    //s.dump();
    assert(s.size()==10);
    cerr << endl;
    
    //testing alphabetical order insertion of insert()
    Map t;
    t.insert("c",3.3);
    //t.dump();
    assert(t.size()==1);
    t.insert("a",1.1);
    //t.dump();
    assert(t.size()==2);
    t.insert("b",2.2);
    //t.dump();
    assert(t.size()==3);
    cerr << endl;
    Map t1;
    t1.insert("z",1.1);
    t1.insert("x",1.1);
    t1.insert("p",1.1);
    t1.insert("l",1.1);
    t1.insert("m",1.1);
    t1.insert("n",1.1);
    t1.insert("o",1.1);
    t1.insert("r",1.1);
    t1.insert("a",1.1);
    t1.insert("c",1.1);
    t1.insert("e",1.1);
    t1.insert("q",1.1);
    t1.insert("w",1.1);
    t1.insert("b",1.1);
    t1.insert("s",1.1);
    t1.insert("u",1.1);
    t1.insert("t",1.1);
    t1.insert("d",1.1);
    t1.insert("f",1.1);
    t1.insert("h",1.1);
    t1.insert("g",1.1);
    t1.insert("k",1.1);
    t1.insert("i",1.1);
    t1.insert("j",1.1);
    t1.insert("y",1.1);
    t1.insert("v",1.1);
    assert(t1.size()==26);
    //t1.dump();
    cerr << endl;
    
    //testing contains() for Maps containing multiple Pairs
    assert(s.contains("a") && s.contains("b") && s.contains("c") && s.contains("d") && s.contains("e") && s.contains("f") && s.contains("g") && s.contains("h") && s.contains("i") && s.contains("j") && (!s.contains("k")));
    assert(t.contains("c") && t.contains("a") && t.contains("b") && (!t.contains("k")));
    //testing contains() for Maps containing two Pairs
    Map u;
    u.insert("a",1.1);
    u.insert("b",2.2);
    assert(u.contains("a") && u.contains("b") && (!u.contains("k")) && u.size()==2 && (!u.empty()));
    //testing contains() for Maps containing one Pair
    Map v;
    v.insert("a",1.1);
    assert(v.contains("a") && (!v.contains("k")) && v.size()==1 && (!v.empty()));
    //testing contains() for Maps containing zero Pairs
    Map w;
    assert((!w.contains("k")) && w.empty() && w.size()==0);

    //testing update() for Maps containing zero pairs
    Map x;
    assert(!x.update("a",1.1));
    //testing update() for Maps containing one pair
    Map y;
    y.insert("a",1.1);
    //y.dump();
    y.update("a",3.3);
    //y.dump();
    assert(!y.update("b",1.1));
    cerr << endl;
    //testing update() for Maps containing two pairs
    Map z;
    z.insert("a",1.1);
    z.insert("b",2.2);
    //z.dump();
    z.update("a",3.3);
    z.update("b",6.6);
    //z.dump();
    assert(!z.update("c",5.5));
    cerr << endl;
    //testing update() for Maps containing three pairs
    Map a;
    a.insert("a",1.1);
    a.insert("b",2.2);
    a.insert("c",3.3);
    //a.dump();
    a.update("a",3.3);
    a.update("b",6.6);
    a.update("c",9.9);
    //a.dump();
    assert(!a.update("d",5.5));
    cerr << endl;
    //testing update() for Maps containing four pairs
    Map b;
    b.insert("a",1.1);
    b.insert("b",2.2);
    b.insert("c",3.3);
    b.insert("d",4.4);
    //b.dump();
    b.update("a",3.3);
    b.update("b",6.6);
    b.update("c",9.9);
    b.update("d",12.12);
    //b.dump();
    assert(!b.update("e",5.5));
    cerr << endl;
    
    //testing functionality of insertOrUpdate() which should work for all insert() and update() test cases as long as "insert" and "update" are changed to "insertOrUpdate"
    cerr << "Now testing for insertOrUpdate()" << endl;
    Map c;
    assert(c.empty());
    assert(c.size()==0);
    c.insertOrUpdate("a",1.1);
    //c.dump();
    assert(c.size()==1);
    c.insertOrUpdate("b",2.2);
    //c.dump();
    assert(c.size()==2);
    c.insertOrUpdate("c",3.3);
    //c.dump();
    assert(c.size()==3);
    c.insertOrUpdate("d",4.4);
    //c.dump();
    assert(c.size()==4);
    c.insertOrUpdate("e",5.5);
    //c.dump();
    assert(c.size()==5);
    c.insertOrUpdate("f",6.6);
    //c.dump();
    assert(c.size()==6);
    c.insertOrUpdate("g",7.7);
    //c.dump();
    assert(c.size()==7);
    c.insertOrUpdate("h",8.8);
    //c.dump();
    assert(c.size()==8);
    c.insertOrUpdate("i",9.9);
    //c.dump();
    assert(c.size()==9);
    c.insertOrUpdate("j",10.10);
    //c.dump();
    assert(s.size()==10);
    cerr << endl;
    
    Map d;
    d.insertOrUpdate("c",3.3);
    //d.dump();
    assert(d.size()==1);
    d.insertOrUpdate("a",1.1);
    //d.dump();
    assert(d.size()==2);
    d.insertOrUpdate("b",2.2);
    //d.dump();
    assert(d.size()==3);
    cerr << endl;
    
    assert(c.contains("a") && c.contains("b") && c.contains("c") && c.contains("d") && c.contains("e") && c.contains("f") && c.contains("g") && c.contains("h") && c.contains("i") && c.contains("j") && (!c.contains("k")));
    assert(d.contains("c") && d.contains("a") && d.contains("b") && (!d.contains("k")));
    //testing contains() for Maps containing two Pairs
    Map e;
    e.insertOrUpdate("a",1.1);
    e.insertOrUpdate("b",2.2);
    assert(e.contains("a") && e.contains("b") && (!e.contains("k")) && e.size()==2 && (!e.empty()));
    //testing contains() for Maps containing one Pair
    Map f;
    f.insertOrUpdate("a",1.1);
    assert(f.contains("a") && (!f.contains("k")) && f.size()==1 && (!f.empty()));
    //testing contains() for Maps containing zero Pairs
    Map g;
    assert((!g.contains("k")) && g.empty() && g.size()==0);

    //testing update() for Maps containing zero pairs
    Map h;
    assert(h.insertOrUpdate("a",1.1));
    assert(h.contains("a") && h.size()==1);
    //h.dump();
    cerr << endl;
    //testing update() for Maps containing one pair
    Map i;
    i.insertOrUpdate("a",1.1);
    //i.dump();
    i.insertOrUpdate("a",3.3);
    //i.dump();
    assert(i.insertOrUpdate("b",1.1));
    assert(i.contains("b") && i.size()==2);
    //i.dump();
    cerr << endl;
    //testing update() for Maps containing two pairs
    Map j;
    j.insertOrUpdate("a",1.1);
    j.insertOrUpdate("b",2.2);
    //j.dump();
    j.insertOrUpdate("a",3.3);
    j.insertOrUpdate("b",6.6);
    //j.dump();
    assert(j.insertOrUpdate("c",5.5));
    assert(j.size()==3 && j.contains("c"));
    //j.dump();
    cerr << endl;
    //testing update() for Maps containing three pairs
    Map k;
    k.insertOrUpdate("a",1.1);
    k.insertOrUpdate("b",2.2);
    k.insertOrUpdate("c",3.3);
    //k.dump();
    k.insertOrUpdate("a",3.3);
    k.insertOrUpdate("b",6.6);
    k.insertOrUpdate("c",9.9);
    //k.dump();
    assert(k.insertOrUpdate("d",5.5));
    assert(k.contains("d") && k.size()==4);
    //k.dump();
    cerr << endl;
    //testing update() for Maps containing four pairs
    Map l;
    l.insertOrUpdate("a",1.1);
    l.insertOrUpdate("b",2.2);
    l.insertOrUpdate("c",3.3);
    l.insertOrUpdate("d",4.4);
    //l.dump();
    l.insertOrUpdate("a",3.3);
    l.insertOrUpdate("b",6.6);
    l.insertOrUpdate("c",9.9);
    l.insertOrUpdate("d",12.12);
    //l.dump();
    assert(l.insertOrUpdate("e",5.5));
    assert(l.size()==5 && l.contains("e"));
    cerr << endl;
    
    //testing erase() for maps with one pair
    Map m;
    m.insert("a",1.1);
    assert((!m.erase("b")) && m.size()==1);
    //m.dump();
    m.erase("a");
    assert(m.size()==0);
    assert(m.empty());
    assert((!m.contains("a")) && (!m.erase("a")));
    //m.dump();
    cerr << endl;
    //testing erase() for maps with zero pairs
    Map n;
    assert(n.size()==0);
    assert(!n.erase("b") && n.size()==0);
    //testing erase() for maps with more than one pair
    Map o;
    o.insert("a",1.1);
    o.insert("b",2.2);
    assert((!o.erase("c")) && o.size()==2);
    o.erase("a");
    assert((!o.contains("a")) && o.size()==1 && (!o.update("a",3.3)) && o.update("b",3.3)  && (!o.erase("a")));
    o.erase("b");
    assert((!o.contains("b")) && o.size()==0 && (!o.update("b",3.3)) && (!o.erase("b")));
    Map o1;
    o1.insert("a",1.1);
    o1.insert("b",2.2);
    assert((!o1.erase("c")) && o1.size()==2);
    o1.erase("b");
    assert((!o1.contains("b")) && o1.size()==1 && (!o1.update("b",3.3)) && (!o1.erase("b")) && o1.update("a",3.3));
    o1.erase("a");
    assert((!o1.contains("a")) && o1.size()==0 && (!o1.update("a",3.3)) && (!o1.erase("a")));
    Map p;
    p.insert("a",1.1);
    p.insert("b",2.2);
    p.insert("c",3.3);
    assert((!p.erase("d")) && p.size()==3);
    p.erase("a");
    assert((!p.contains("a")) && p.size()==2 && (!p.update("a",3.3)) && p.update("b",3.3)  && (!p.erase("a")));
    p.erase("b");
    assert((!p.contains("b")) && p.size()==1 && (!p.update("b",3.3)) && (!p.erase("b")));
    p.erase("c");
    assert((!p.contains("c")) && p.size()==0 && (!p.update("c",3.3)) && (!p.erase("c")));
    Map p1;
    p1.insert("a",1.1);
    p1.insert("b",2.2);
    p1.insert("c",3.3);
    assert((!p1.erase("d")) && p1.size()==3);
    p1.erase("c");
    assert((!p1.contains("c")) && p1.size()==2 && (!p1.update("c",3.3)) && p1.update("b",3.3)  && (!p1.erase("c")));
    p1.erase("b");
    assert((!p1.contains("b")) && p1.size()==1 && (!p1.update("b",3.3)) && (!p1.erase("b")));
    p1.erase("a");
    assert((!p1.contains("a")) && p1.size()==0 && (!p1.update("a",3.3)) && (!p1.erase("a")));
    Map p2;
    p2.insert("a",1.1);
    p2.insert("b",2.2);
    p2.insert("c",3.3);
    assert((!p2.erase("d")) && p2.size()==3);
    p2.erase("b");
    assert((!p2.contains("b")) && p2.size()==2 && (!p2.update("b",3.3)) && p2.update("a",3.3)  && (!p2.erase("b")));
    p2.erase("c");
    assert((!p2.contains("c")) && p2.size()==1 && (!p2.update("c",3.3)) && (!p2.erase("c")));
    p2.erase("a");
    assert((!p2.contains("a")) && p2.size()==0 && (!p2.update("a",3.3)) && (!p2.erase("a")));
    Map p3;
    p3.insert("a",1.1);
    p3.insert("b",2.2);
    p3.insert("c",3.3);
    assert((!p3.erase("d")) && p3.size()==3);
    p3.erase("b");
    assert((!p3.contains("b")) && p3.size()==2 && (!p3.update("b",3.3)) && p3.update("a",3.3)  && (!p3.erase("b")));
    p3.erase("a");
    assert((!p3.contains("a")) && p3.size()==1 && (!p3.update("a",3.3)) && (!p3.erase("a")));
    p3.erase("c");
    assert((!p3.contains("c")) && p3.size()==0 && (!p3.update("c",3.3)) && (!p3.erase("c")));
    Map q;
    q.insert("a",1.1);
    q.insert("b",2.2);
    q.insert("c",3.3);
    q.insert("d",4.4);
    assert((!q.erase("e")) && q.size()==4);
    q.erase("a");
    assert((!q.contains("a")) && q.size()==3 && (!q.update("a",3.3)) && q.update("b",3.3)  && (!q.erase("a")));
    q.erase("b");
    assert((!q.contains("b")) && q.size()==2 && (!q.update("b",3.3)) && (!q.erase("b")));
    q.erase("c");
    assert((!q.contains("c")) && q.size()==1 && (!q.update("c",3.3)) && (!q.erase("c")));
    q.erase("d");
    assert((!q.contains("d")) && q.size()==0 && (!q.update("d",3.3)) && (!q.erase("d")));
    
    Map q1;
    q1.insert("a",1.1);
    q1.insert("b",2.2);
    q1.insert("c",3.3);
    q1.insert("d",4.4);
    assert((!q1.erase("e")) && q1.size()==4);
    q1.erase("a");
    assert((!q1.contains("a")) && q1.size()==3 && (!q1.update("a",3.3)) && q1.update("b",3.3)  && (!q1.erase("a")));
    q1.erase("c");
    assert((!q1.contains("c")) && q1.size()==2 && (!q1.update("c",3.3)) && (!q1.erase("c")));
    q1.erase("d");
    assert((!q1.contains("d")) && q1.size()==1 && (!q1.update("d",3.3)) && (!q1.erase("d")));
    q1.erase("b");
    assert((!q1.contains("b")) && q1.size()==0 && (!q1.update("b",3.3)) && (!q1.erase("b")));
    
    Map q2;
    q2.insert("a",1.1);
    q2.insert("b",2.2);
    q2.insert("c",3.3);
    q2.insert("d",4.4);
    assert((!q2.erase("e")) && q2.size()==4);
    q2.erase("d");
    assert((!q2.contains("d")) && q2.size()==3 && (!q2.update("d",3.3)) && q2.update("b",3.3)  && (!q2.erase("d")));
    q2.erase("b");
    assert((!q2.contains("b")) && q2.size()==2 && (!q2.update("b",3.3)) && (!q2.erase("b")));
    q2.erase("c");
    assert((!q2.contains("c")) && q2.size()==1 && (!q2.update("c",3.3)) && (!q2.erase("c")));
    q2.erase("a");
    assert((!q2.contains("a")) && q2.size()==0 && (!q2.update("a",3.3)) && (!q2.erase("a")));
    
    //testing all maps above for get(const KeyType& key, ValueType& value) const;
    ValueType getting = 0;
    s.get("a",getting);
    assert(getting==1.1);
    s.get("b",getting);
    assert(getting==2.2);
    s.get("c",getting);
    assert(getting==3.3);
    s.get("d",getting);
    assert(getting==4.4);
    s.get("e",getting);
    assert(getting==5.5);
    s.get("f",getting);
    assert(getting==6.6);
    s.get("g",getting);
    assert(getting==7.7);
    s.get("h",getting);
    assert(getting==8.8);
    s.get("i",getting);
    assert(getting==9.9);
    s.get("j",getting);
    assert(getting==10.10);
    t.get("c",getting);
    assert(getting==3.3);
    t.get("a",getting);
    assert(getting==1.1);
    t.get("b",getting);
    assert(getting==2.2);
    t1.get("a",getting);
    assert(getting==1.1);
    t1.get("b",getting);
    assert(getting==1.1);
    t1.get("c",getting);
    assert(getting==1.1);
    t1.get("d",getting);
    assert(getting==1.1);
    t1.get("e",getting);
    assert(getting==1.1);
    t1.get("f",getting);
    assert(getting==1.1);
    t1.get("g",getting);
    assert(getting==1.1);
    t1.get("h",getting);
    assert(getting==1.1);
    t1.get("i",getting);
    assert(getting==1.1);
    t1.get("j",getting);
    assert(getting==1.1);
    t1.get("k",getting);
    assert(getting==1.1);
    t1.get("l",getting);
    assert(getting==1.1);
    t1.get("m",getting);
    assert(getting==1.1);
    t1.get("n",getting);
    assert(getting==1.1);
    t1.get("o",getting);
    assert(getting==1.1);
    t1.get("p",getting);
    assert(getting==1.1);
    t1.get("q",getting);
    assert(getting==1.1);
    t1.get("r",getting);
    assert(getting==1.1);
    t1.get("s",getting);
    assert(getting==1.1);
    t1.get("t",getting);
    assert(getting==1.1);
    t1.get("u",getting);
    assert(getting==1.1);
    t1.get("v",getting);
    assert(getting==1.1);
    t1.get("w",getting);
    assert(getting==1.1);
    t1.get("x",getting);
    assert(getting==1.1);
    t1.get("y",getting);
    assert(getting==1.1);
    t1.get("z",getting);
    assert(getting==1.1);
    u.get("a",getting);
    assert(getting==1.1);
    u.get("b",getting);
    assert(getting==2.2);
    v.get("a",getting);
    assert(getting==1.1);
    assert(!w.get("a",getting));
    assert(!v.get("b",getting));
    assert(!t1.get("Hello",getting));
    x.get("a",getting);
    assert(getting==1.1);
    y.get("a",getting);
    assert(getting==3.3);
    z.get("a",getting);
    assert(getting==3.3);
    z.get("b",getting);
    assert(getting==6.6);
    a.get("a",getting);
    assert(getting==3.3);
    a.get("b",getting);
    assert(getting==6.6);
    a.get("c",getting);
    assert(getting==9.9);
    
    //testing get(int i, KeyType& key, ValueType& value) const;
    //testing for Maps with zero pairs
    cerr << "Testing for the get(int,KeyType&,ValueType&) const function" << endl;
    KeyType keyVar;
    ValueType valueVar;
    Map aa;
    assert(aa.size()==0 && aa.empty() && (!aa.get(1,keyVar,valueVar)) && (!aa.get(0,keyVar,valueVar)) && (!aa.get(4,keyVar,valueVar)));
    //testing for Maps with one pair
    Map bb;
    bb.insert("a",1.1);
    assert(bb.size()==1 && (!bb.empty()) && (!bb.get(-1,keyVar,valueVar)) && (!bb.get(1,keyVar,valueVar)) && (!bb.get(2,keyVar,valueVar)) && (!bb.get(5,keyVar,valueVar)));
    assert(bb.get(0,keyVar,valueVar) && keyVar=="a" && valueVar==1.1);
    //testing for Maps with two pairs
    Map cc;
    cc.insert("a",1.1);
    cc.insert("b",2.2);
    assert(cc.size()==2 && (!cc.empty()) && (!cc.get(-1,keyVar,valueVar)));
    assert((!cc.get(3,keyVar,valueVar)) && (!cc.get(5,keyVar,valueVar)) && (!cc.get(2,keyVar,valueVar)));
    assert(cc.get(0,keyVar,valueVar) && keyVar=="a" && valueVar==1.1);
    assert(cc.get(1,keyVar,valueVar) && keyVar=="b" && valueVar==2.2);
    assert(!cc.get(2,keyVar,valueVar));
    //testing for Maps with three pairs
    Map dd;
    dd.insert("a",1.1);
    dd.insert("b",2.2);
    dd.insert("c",3.3);
    assert(dd.size()==3 && (!dd.get(-1,keyVar,valueVar)) && (!dd.get(3,keyVar,valueVar)) && (!dd.get(5,keyVar,valueVar)));
    assert(dd.get(0,keyVar,valueVar) && keyVar=="a" && valueVar==1.1);
    assert(dd.get(1,keyVar,valueVar) && keyVar=="b" && valueVar==2.2);
    assert(dd.get(2,keyVar,valueVar) && keyVar=="c" && valueVar==3.3);
    assert(!dd.get(3,keyVar,valueVar));
    //testing for Maps with any greater number of pairs
    Map ee;
    ee.insert("a",1.1);
    ee.insert("b",2.2);
    ee.insert("c",3.3);
    ee.insert("d",4.4);
    assert(ee.size()==4 && (!ee.get(-1,keyVar,valueVar)) && (!ee.get(4,keyVar,valueVar)) && (!ee.get(5,keyVar,valueVar)));
    assert(ee.get(0,keyVar,valueVar) && keyVar=="a" && valueVar==1.1);
    assert(ee.get(1,keyVar,valueVar) && keyVar=="b" && valueVar==2.2);
    assert(ee.get(2,keyVar,valueVar) && keyVar=="c" && valueVar==3.3);
    assert(ee.get(3,keyVar,valueVar) && keyVar=="d" && valueVar==4.4);
    Map ff;
    ff.insert("a",1.1);
    ff.insert("b",2.2);
    ff.insert("c",3.3);
    ff.insert("d",4.4);
    ff.insert("e",5.5);
    assert(ff.size()==5 && (!ff.get(-1,keyVar,valueVar)) && (!ff.get(5,keyVar,valueVar)) && (!ff.get(10,keyVar,valueVar)));
    assert(ff.get(0,keyVar,valueVar) && keyVar=="a" && valueVar==1.1);
    assert(ff.get(1,keyVar,valueVar) && keyVar=="b" && valueVar==2.2);
    assert(ff.get(2,keyVar,valueVar) && keyVar=="c" && valueVar==3.3);
    assert(ff.get(3,keyVar,valueVar) && keyVar=="d" && valueVar==4.4);
    assert(ff.get(4,keyVar,valueVar) && keyVar=="e" && valueVar==5.5);
    
    cerr << "Testing for the swap() function" << endl;
    Map gg;
    Map hh;
    assert(gg.empty() && hh.empty());
    gg.swap(hh);
    assert(gg.empty() && hh.empty());
    Map ii;
    Map jj;
    jj.insert("a",1.1);
    ii.swap(jj);
    assert(ii.size()==1 && ii.contains("a") && jj.size()==0 && (!jj.contains("a")));
    Map kk;
    Map ll;
    ll.insert("a",1.1);
    ll.swap(kk);
    assert(kk.size()==1 && kk.contains("a") && ll.size()==0 && (!ll.contains("a")));
    Map mm;
    mm.insert("a",1.1);
    Map nn;
    nn.insert("b",2.2);
    mm.swap(nn);
    assert(mm.size()==1 && mm.contains("b") && (!mm.contains("a")) && nn.size()==1 && (!nn.contains("b")) && nn.contains("a"));
    Map oo;
    oo.insert("a",1.1);
    oo.insert("b",2.2);
    Map pp;
    pp.insert("c",3.3);
    pp.insert("d",4.4);
    oo.swap(pp);
    assert(oo.size()==2 && pp.size()==2 && oo.contains("c") && oo.contains("d") && (!oo.contains("a")) && (!oo.contains("b")) && pp.contains("a") && pp.contains("b") && (!pp.contains("c")) && (!pp.contains("d")));
    Map qq;
    Map rr;
    rr.insert("a",1.1);
    rr.insert("b",2.2);
    qq.swap(rr);
    assert(qq.size()==2 && rr.size()==0 && qq.contains("a") && qq.contains("b") && rr.empty());
    Map uu;
    Map vv;
    vv.insert("a",1.1);
    vv.insert("b",2.2);
    vv.swap(uu);
    assert(uu.size()==2 && vv.size()==0 && uu.contains("a") && uu.contains("b") && vv.empty());
    Map ss;
    ss.insert("a",1.1);
    Map tt;
    tt.insert("b",2.2);
    tt.insert("c",3.3);
    tt.insert("d",4.4);
    ss.swap(tt);
    assert(ss.size()==3 && tt.size()==1 && ss.contains("b") && ss.contains("c") && ss.contains("d") && (!ss.contains("a")) && tt.contains("a") && (!tt.contains("b")) && (!tt.contains("c")) && (!tt.contains("d")));
    Map a10;
    a10.insert("a",1.1);
    Map a11;
    a11.insert("a",1.1);
    a10.swap(a11);
    
    //testing operator=()
    cerr << "Testing for operator=()" << endl;
    Map aaa;
    Map bbb;
    aaa=bbb;
    assert(aaa.empty() && bbb.empty());
    Map ccc;
    ccc.insert("b",1.1);
    Map ddd;
    ddd.insert("b",2.2);
    ccc=ddd;
    assert(ccc.size()==1 && ddd.size()==1);
    //ccc.dump();
    //ddd.dump();
    Map ccc1;
    ccc1.insert("a",1.1);
    Map ddd1;
    ddd1.insert("b",2.2);
    ccc1=ddd1;
    assert(ccc1.size()==1 && ddd1.size()==1);
    //ccc1.dump();
    //ddd1.dump();
    Map ccc11;
    ccc11.insert("a",1.1);
    Map ddd11;
    ddd11.insert("b",2.2);
    ddd11=ccc11;
    assert(ccc11.size()==1 && ddd11.size()==1);
    //ddd11.dump();
    //ccc11.dump();
    Map ww11;
    Map xx11;
    xx11.insert("a",1.1);
    xx11=ww11;
    assert(xx11.empty() && ww11.empty());
    //xx11.dump();
    //ww11.dump();
    Map ww1;
    Map xx1;
    xx1.insert("a",1.1);
    ww1=xx1;
    assert(ww1.size()==1 && ww1.contains("a"));
    assert(xx1.size()==1 && xx1.contains("a"));
    //ww1.dump();
    //xx1.dump();
    
    Map ab;
    ab.insert("a",1.1);
    ab.insert("b",2.2);
    Map cd;
    cd.insert("c",3.3);
    cd.insert("d",4.4);
    ab=cd;
    assert(ab.size()==2 && cd.size()==2);
    //ab.dump();
    //cd.dump();
    
    Map ww;
    Map xx;
    xx.insert("a",1.1);
    xx.insert("b",2.2);
    ww=xx;
    assert(ww.size()==2);
    assert(xx.size()==2);
    //xx.dump();
    //ww.dump();
    
    Map www1;
    Map wxx1;
    wxx1.insert("a",1.1);
    wxx1.insert("b",2.2);
    wxx1=www1;
    assert(www1.empty());
    assert(wxx1.empty());
    //wxx1.dump();
    //www1.dump();
    
    Map jk;
    jk.insert("a",1.1);
    jk.insert("b",2.2);
    jk.insert("c",3.3);
    Map jkjk;
    jkjk.insert("d",4.4);
    jkjk.insert("e",5.5);
    jkjk.insert("f",6.6);
    jk=jkjk;
    assert(jk.size()==3 && jkjk.size()==3);
    //jk.dump();
    //jkjk.dump();
    
    Map jk1;
    jk1.insert("a",1.1);
    jk1.insert("b",2.2);
    jk1.insert("c",3.3);
    Map jkjk1;
    jkjk1.insert("d",4.4);
    jkjk1.insert("e",5.5);
    jkjk1.insert("f",6.6);
    jkjk1=jk1;
    assert(jk.size()==3 && jkjk.size()==3);
    //jk1.dump();
    //jkjk1.dump();
    
    Map lol;
    Map lols;
    lols.insert("a",1.1);
    lols.insert("b",2.2);
    lols.insert("c",3.3);
    lol=lols;
    assert(lol.size()==3 && lols.size()==3);
    //lol.dump();
    //lols.dump();
    
    Map lol1;
    Map lols1;
    lols1.insert("a",1.1);
    lols1.insert("b",2.2);
    lols1.insert("c",3.3);
    lols1=lol1;
    assert(lol1.empty() && lols1.empty());
    //lol1.dump();
    //lols1.dump();
    
    Map wt;
    wt.insert("a",1.1);
    wt.insert("b",2.2);
    Map wh;
    wh.insert("c",3.3);
    wh.insert("d",4.4);
    wh.insert("e",5.5);
    wh.insert("f",6.6);
    wh.insert("g",7.7);
    wt=wh;
    assert(wt.size()==5 && wh.size()==5);
    //wt.dump();
    //wh.dump();
    
    Map wt1;
    wt1.insert("a",1.1);
    wt1.insert("b",2.2);
    Map wh1;
    wh1.insert("c",3.3);
    wh1.insert("d",4.4);
    wh1.insert("e",5.5);
    wh1.insert("f",6.6);
    wh1.insert("g",7.7);
    wh1=wt1;
    assert(wt1.size()==2 && wh1.size()==2);
    //wt1.dump();
    //wh1.dump();
    cerr << endl;
    
    cerr << "Testing merge()*****************" << endl;
    Map me;
    me.insert("Fred",123);
    me.insert("Ethel",456);
    me.insert("Lucy",789);
    Map em;
    em.insert("Lucy",789);
    em.insert("Ricky",321);
    //me.dump();
    //em.dump();
    Map empty;
    assert(merge(me,em,empty));
    //empty.dump();
    //me.dump();
    //em.dump();
    Map em1;
    em1.insert("Lucy",654);
    em1.insert("Ricky",321);
    assert(!merge(me,em1,empty));
    //empty.dump();
    
    Map ai;
    Map bi;
    assert(merge(ai,bi,empty) && empty.empty());
    bi.insert("a",123);
    assert(merge(ai,bi,empty) && empty.size()==1);
    //empty.dump();
    bi.insert("b",456);
    assert(merge(ai,bi,empty) && empty.size()==2);
    //empty.dump();
    ai.insert("a",456);
    ai.insert("b",789);
    assert((!merge(ai,bi,empty)) && empty.size()==0);
    //empty.dump();
    
    Map ai1;
    Map bi1;
    assert(merge(bi1,ai1,empty) && empty.empty());
    bi1.insert("a",123);
    assert(merge(bi1,ai1,empty) && empty.size()==1);
    //empty.dump();
    bi1.insert("b",456);
    assert(merge(bi1,ai1,empty) && empty.size()==2);
    //empty.dump();
    ai1.insert("a",456);
    ai1.insert("b",789);
    assert((!merge(bi1,ai1,empty)) && empty.size()==0);
    //empty.dump();
    
    cerr << "Hello" << endl;
    Map ci;
    ci.insert("a",1.1);
    ci.insert("b",2.2);
    ci.insert("c",3.3);
    Map di;
    di.insert("e",4.4);
    di.insert("f",5.5);
    di.insert("g",6.6);
    di.insert("h",7.7);
    di.insert("i",8.8);
    di.insert("j",9.9);
    di.insert("k",10.10);
    assert(merge(ci,di,empty) && empty.size()==10);
    di.insert("a",1.1);
    assert(merge(ci,di,empty) && empty.size()==10);
    //empty.dump();
    di.update("a",2.2);
    assert(!merge(ci,di,empty) && empty.size()==9);
    //empty.dump();
    ci.insert("h",7.7);
    assert(!merge(ci,di,empty) && empty.size()==9);
    di.update("a",1.1);
    assert(merge(ci,di,empty) && empty.size()==10);
    ci.update("h",9.9);
    assert(!merge(ci,di,empty) && empty.size()==9);
    
    Map ci1;
    ci1.insert("a",1.1);
    ci1.insert("b",2.2);
    ci1.insert("c",3.3);
    Map di1;
    di1.insert("e",4.4);
    di1.insert("f",5.5);
    di1.insert("g",6.6);
    di1.insert("h",7.7);
    di1.insert("i",8.8);
    di1.insert("j",9.9);
    di1.insert("k",10.10);
    assert(merge(di1,ci1,empty) && empty.size()==10);
    di1.insert("a",1.1);
    assert(merge(di1,ci1,empty) && empty.size()==10);
    //empty.dump();
    di1.update("a",2.2);
    assert(!merge(di1,ci1,empty) && empty.size()==9);
    //empty.dump();
    ci1.insert("h",7.7);
    assert(!merge(di1,ci1,empty) && empty.size()==9);
    di1.update("a",1.1);
    assert(merge(di1,ci1,empty) && empty.size()==10);
    ci1.update("h",9.9);
    assert(!merge(di1,ci1,empty) && empty.size()==9);
    cerr << "Lovely" << endl;
    
    Map hi;
    Map ji;
    assert(merge(hi,ji,hi) && hi.empty() && ji.empty());
    assert(merge(hi,ji,ji) && hi.empty() && ji.empty());
    hi.insert("a",123);
    assert(merge(hi,ji,hi) && hi.size()==1 && ji.empty());
    hi.insert("b",456);
    assert(merge(hi,ji,hi) && hi.size()==2 && ji.empty());
    ji.insert("c",789);
    assert(merge(hi,ji,hi) && hi.size()==3 && ji.size()==1);
    ji.insert("d",119);
    assert(merge(hi,ji,hi) && hi.size()==4 && ji.size()==2);
    assert(merge(hi,ji,hi) && hi.size()==4 && ji.size()==2);
    ji.insert("a",456);
    assert(!merge(hi,ji,hi) && hi.size()==3 && ji.size()==3);
    
    Map hi1;
    Map ji1;
    assert(merge(hi1,ji1,hi1) && hi1.empty() && ji1.empty());
    assert(merge(hi1,ji1,ji1) && hi1.empty() && ji1.empty());
    hi1.insert("a",123);
    assert(merge(hi1,ji1,ji1) && hi1.size()==1 && ji1.size()==1);
    hi1.insert("b",456);
    assert(merge(hi1,ji1,ji1) && hi1.size()==2 && ji1.size()==2);
    ji1.insert("c",789);
    assert(merge(hi1,ji1,ji1) && hi1.size()==2 && ji1.size()==3);
    ji1.insert("d",119);
    assert(merge(hi1,ji1,ji1) && hi1.size()==2 && ji1.size()==4);
    assert(merge(hi1,ji1,ji1) && hi1.size()==2 && ji1.size()==4);
    assert(hi1.contains("a") && hi1.contains("b") && ji1.contains("a") && (!hi1.contains("c")) && (!hi1.contains("d")) && ji1.contains("b") && ji1.contains("c") && ji1.contains("d"));
    hi1.insert("c",110);
    assert(hi1.contains("a") && hi1.contains("b") && hi1.contains("c") && ji1.contains("a") && ji1.contains("b") && ji1.contains("c") && ji1.contains("d") && (!hi1.contains("d")));
    assert((!merge(hi1,ji1,ji1)) && hi1.size()==3 && ji1.size()==3 && hi1.contains("a") && hi1.contains("b") && hi1.contains("c") && ji1.contains("a") && ji1.contains("b") && ji1.contains("d") && (!ji1.contains("c")) && (!hi1.contains("d")));
    assert(hi1.size()==3 && ji1.size()==3);
    cerr << "********************************" << endl;
    cerr << endl;
    
    cerr << "Testing reassign() **************" << endl;
    Map bug;
    Map fish;
    reassign(bug,fish);
    assert(bug.empty() && fish.empty());
    fish.insert("salmon",1.1);
    reassign(bug,fish);
    //bug.dump();
    //fish.dump();
    assert(bug.empty() && fish.size()==0 && (!fish.contains("salmon")));
    
    Map bugs;
    Map fishes;
    fishes.insert("salmon",1.1);
    reassign(fishes,bugs);
    assert(fishes.size()==1 && fishes.contains("salmon") && bugs.size()==1 && bugs.contains("salmon"));
    
    Map jack;
    jack.insert("a",123);
    jack.insert("b",456);
    reassign(jack,bugs);
    assert(jack.size()==2 && bugs.size()==2);
    
    Map fi;
    fi.insert("Fred",123);
    fi.insert("Ethel",456);
    fi.insert("Lucy",789);
    fi.insert("Ricky",321);
    reassign(fi,bugs);
    assert(fi.size()==4 && bugs.size()==4);
    //fi.dump();
    //bugs.dump();
    
    Map gi;
    gi.insert("Fred",123);
    gi.insert("Ethel",456);
    gi.insert("Lucy",456);
    reassign(gi,bugs);
    //bugs.dump();
    
    Map dubs;
    dubs.insert("Hi",123);
    dubs.insert("Bye",123);
    reassign(dubs,bugs);
    //bugs.dump();
    
    Map dups;
    dups.insert("Hi",123);
    dups.insert("Bye",123);
    dups.insert("Jung",999);
    reassign(dups,bugs);
    //bugs.dump();
    cerr << "*********************************" << endl;
    cerr << endl;
    
    cerr << "Testing for copy constructor******" << endl;
    Map dupdup(dups);
 //   dupdup.dump();
    Map duby(dubs);
 //   dubs.dump();
    Map derp;
    Map derpy(derp);
  //  derpy.dump();
    derp.insert("a",1.1);
    Map derpy1(derp);
 //   derpy1.dump();
    derp.insert("b",2.2);
    Map derpy2(derp);
//    derpy2.dump();
    derp.insert("c",3.3);
    Map derpy3(derp);
 //   derpy3.dump();
    derp.insert("d",4.4);
    derp.insert("e",5.5);
    derp.insert("f",6.6);
    Map derpy4(derp);
//    derpy4.dump();
    cerr << "*********************************" << endl;
    cerr << endl;
    
//    cerr << "Nice.." << endl;
//      cerr << "test A" << endl;
//    Map kko;
//      cerr << "test B" << endl;
//    kko.insert("10", IntWrapper(10));
//      cerr << "test C" << endl;
//    kko.insert("20", IntWrapper(20));
//      cerr << "test D" << endl;
//    Map m2k;
//      cerr << "test E" << endl;
//    m2k.insert("30", IntWrapper(30));
//      cerr << "test F" << endl;
//    m2k = kko;
//      cerr << "test G" << endl;
//    m2k.insert("40", IntWrapper(40));
//      cerr << "test H" << endl;
}

int main()
{
    test();
    cerr << "DONE" << endl;
}
